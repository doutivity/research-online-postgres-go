// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user_online_fixture.sql

package dbs

import (
	"context"
)

const userOnlineAll = `-- name: UserOnlineAll :many
SELECT user_id, online
FROM user_online
ORDER BY user_id
`

func (q *Queries) UserOnlineAll(ctx context.Context) ([]UserOnline, error) {
	rows, err := q.db.Query(ctx, userOnlineAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserOnline
	for rows.Next() {
		var i UserOnline
		if err := rows.Scan(&i.UserID, &i.Online); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userOnlineFixtureCount = `-- name: UserOnlineFixtureCount :one
SELECT COUNT(*) AS total,
       SUM(
               CASE online
                   WHEN TO_TIMESTAMP($1::BIGINT) THEN 0
                   ELSE 1
                   END
           )    AS changed
FROM user_online
`

type UserOnlineFixtureCountRow struct {
	Total   int64
	Changed int64
}

func (q *Queries) UserOnlineFixtureCount(ctx context.Context, online int64) (UserOnlineFixtureCountRow, error) {
	row := q.db.QueryRow(ctx, userOnlineFixtureCount, online)
	var i UserOnlineFixtureCountRow
	err := row.Scan(&i.Total, &i.Changed)
	return i, err
}

const userOnlineFixtureUpsert = `-- name: UserOnlineFixtureUpsert :exec
INSERT INTO user_online (user_id, online)
SELECT generate_series,
       to_timestamp($1::BIGINT)
FROM generate_series(1, $2::BIGINT)
ON CONFLICT (user_id) DO UPDATE
    SET online = excluded.online
`

type UserOnlineFixtureUpsertParams struct {
	Online int64
	Count  int64
}

func (q *Queries) UserOnlineFixtureUpsert(ctx context.Context, arg UserOnlineFixtureUpsertParams) error {
	_, err := q.db.Exec(ctx, userOnlineFixtureUpsert, arg.Online, arg.Count)
	return err
}
